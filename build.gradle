plugins {
    id 'org.springframework.boot' version '2.5.6'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.google.cloud.tools.jib' version '3.1.4'
    id 'java'
}

group = 'de.slevermann.cocktails'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


repositories {
    mavenCentral()
    maven {
        name = "Github"
        url = "https://maven.pkg.github.com/cocktail-api/cocktails-api"
        // GitHub Maven registry does not support anonymous fetching.
        // Generate a PAT with scope read:packages and set the following properties in ~/.gradle/gradle.properties
        // githubMavenUser=yourGithubUserName
        // githubMavenPassword=yourGeneratedPAT
        credentials {
            username = project.hasProperty("githubMavenUser") ? project.property("githubMavenUser") : System.getenv("MAVEN_USERNAME")
            password = project.hasProperty("githubMavenPassword") ? project.property("githubMavenPassword") : System.getenv("MAVEN_PASSWORD")
        }
    }
}

configurations.all {
    resolutionStrategy.cacheDynamicVersionsFor 1, 'seconds'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    //implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    //implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.jdbi:jdbi3-spring5:3.23.0'
    implementation 'org.jdbi:jdbi3-sqlobject:3.23.0'
    implementation 'org.jdbi:jdbi3-postgres:3.23.0'
    implementation 'net.logstash.logback:logstash-logback-encoder:6.6'
    implementation 'org.mapstruct:mapstruct:1.4.2.Final'

    implementation 'de.slevermann.cocktails:cocktails-api:0.0.1-SNAPSHOT'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    runtimeOnly 'io.micrometer:micrometer-registry-prometheus'
    runtimeOnly 'org.postgresql:postgresql'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.1.0'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    //testImplementation 'org.springframework.security:spring-security-test'
    testImplementation "org.testcontainers:testcontainers:1.16.2"
    testImplementation "org.testcontainers:junit-jupiter:1.16.2"
    testImplementation "org.testcontainers:postgresql:1.16.2"
}

// To run tests without testcontainers, run "gradle -PnoDocker test".
// If you do this, adjust src/test/resources/application-nodocker.yaml accordingly
test {
    if (project.hasProperty('noDocker')) {
        environment 'NO_DOCKER', 'true'
        environment 'SPRING_PROFILES_ACTIVE', 'nodocker'
    }

    if (project.hasProperty('ci')) {
        environment 'NO_DOCKER', 'true'
        environment 'SPRING_PROFILES_ACTIVE', 'ci'
    }

    useJUnitPlatform()
}

bootRun {
    args = ["--spring.profiles.active=dev"]
}


compileJava {
    options.compilerArgs += [
            '-Amapstruct.defaultComponentModel=spring',
            '-Amapstruct.defaultInjectionStrategy=constructor'
    ]
}

jib {
    from {
        image = 'eclipse-temurin:17-jdk-alpine'
    }

    to {
        image = "ghcr.io/cocktail-api/backend:latest"
    }
    container {
        labels = ["org.opencontainers.image.source": "https://github.com/cocktail-api/cocktails-backend"]
    }
}
